package com.drools;

import java.util.ArrayList
import javafx.scene.control.ChoiceDialog
import java.util.Optional
import javafx.scene.control.Label
import java.util.List
import java.util.Arrays
import com.jfoenix.controls.JFXButton

global com.jfoenix.controls.JFXButton nextButton

//======================================================================================DEKLARACJE KLAS=================================================================
declare Client
    cares_about : String
    meaningOfSoul: String
    kindOfStyle: String
    whyTechnicallyNovel: String
end

declare Preferences
    option: String
end

declare Car
    name: String
    brand: String
end


//==================================================================================== RULES ==============================================================================

//na poczatku uruchamiamy pierwszy dialog. ustalamy pytanie oraz propozycje wyboru. Tworzymy obiekt typu Preferences aby miec dostep do ostatniej decyzji uzytkownika. Wkladamy go do bazy wiedzy.
//tworzymy rowniez nowego klienta z pierwsza preferencja
rule "Initalization"
when
then
String[] myOptions = new String[] {"New cars have no soul","Reliability and convenience bore me","I Guess I'm making some kind of statement about something?","I prefer the style","Love speed hate safety"};
List choices = Arrays.asList(myOptions);
String nextQuestion = "Why do you want a classic?";
//ustawiamy kolejny dialog na podstawie wybranych opcji oraz pytania
ChoiceDialog<String> dialog = createDialog(choices,nextQuestion);
Preferences preferences = new Preferences();
preferences.setOption(getUserChoice(dialog));
insert(preferences);
Client client = new Client();
client.setCares_about(preferences.getOption());
insert(client);

end




//***************************
//HAVE NO SOUL
//***************************
//ODNOSI SIE DO PIERWSZEGO PYTANIA
//na poczatku dialogu klient nie ma zadnych zadeklarowanych pol wiec sprawdzamy jego pierwszą preferencje
//w sekjci then ustawiamy nowy dialog oraz zapisujemy kolejna, ostatnią odpowiedz Klienta do obiektu typu Preferences -> UPDEJTUJEMY TEN OBIEKT W BAZIE
//no-loop - dzieki temu unikamy zapetlenia sie reguły
rule "New cars have no soul"
no-loop
when
p:Preferences(option=="New cars have no soul")
then
String[] myOptions = new String[] {"Easy: ability to drive off a pier into an Estuary","Synonym for weird","Technically novel","Soul means the Car had an honest job, like a Cop or Cobbie","It means riding in it is like sitting on a Sofa","It means the Car is often starring in Movies","It could mean pure Evil?","Soul is the spirits of 43 dead clowns haunting the Car","Soul is the ability to go a million miles with Su Carbs and Lucas Electrics"};
List choices = Arrays.asList(myOptions);
String nextQuestion="What does soul mean to you?";
ChoiceDialog dialog = createDialog(choices,nextQuestion);
p.setOption(getUserChoice(dialog));
update(p);
end

//kolejne zapytanie -> sprawdzamy zatem aktualnego klienta oraz jego ostatni wybor, poniewaz klient ma juz jakies cechy
//po tym zapytaniu uzytkownik nie bedziemy miec juz wiecej nowych wyborow zatem updejtujemy tylko jego aktualne decyzje w bazie i tyle



rule "Synonym for weird"
no-loop
when p:Preferences(option=="Synonym for weird")
     c: Client(cares_about=="New cars have no soul")
then
     c.setMeaningOfSoul(p.getOption());
     System.out.println("wykonuje sie");
update(c);
end

 //kolejne zapytanie - > sytuacja w ktorej nie ma juz do wyboru zadnych nowych decyzji
 //sprawdzamy cechy naszego klienta i na jego podstawie wybieramy dla niego samochody
rule "Client with weird soul"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Synonym for weird")
then //tutaj wyswietlimy nowe autka      System.out.println("Mamy dla tego klienta 3 auta");
        //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end

rule "Easy: ability to drive off a pier into an Estuary"
no-loop
when p:Preferences(option=="Easy: ability to drive off a pier into an Estuary")
     c: Client(cares_about=="New cars have no soul")
then
     c.setMeaningOfSoul(p.getOption());
     System.out.println("wykonuje sie");
update(c);
end

 //kolejne zapytanie - > sytuacja w ktorej nie ma juz do wyboru zadnych nowych decyzji
 //sprawdzamy cechy naszego klienta i na jego podstawie wybieramy dla niego samochody
rule "Client Easy: ability to drive off a pier into an Estuary"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Easy: ability to drive off a pier into an Estuary")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta s");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end



rule "Soul means the Car had an honest job, like a Cop or Cobbie novel"
no-loop
when p:Preferences(option=="Soul means the Car had an honest job, like a Cop or Cobbie")
     c: Client(cares_about=="New cars have no soul")
then
    c.setMeaningOfSoul(p.getOption());
    System.out.println("wykonuje sie");
update(c);
end

 //kolejne zapytanie - > sytuacja w ktorej nie ma juz do wyboru zadnych nowych decyzji
 //sprawdzamy cechy naszego klienta i na jego podstawie wybieramy dla niego samochody
rule "Client Soul means the Car had an honest job, like a Cop or Cobbie"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Soul means the Car had an honest job, like a Cop or Cobbie")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta w");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end



rule "It means the Car is often starring in Movies"
no-loop
when p:Preferences(option=="It means the Car is often starring in Movies")
     c: Client(cares_about=="New cars have no soul")
then
    c.setMeaningOfSoul(p.getOption());
    System.out.println("wykonuje sie");
update(c);
end

 //kolejne zapytanie - > sytuacja w ktorej nie ma juz do wyboru zadnych nowych decyzji
 //sprawdzamy cechy naszego klienta i na jego podstawie wybieramy dla niego samochody
rule "Client It means the Car is often starring in Movies"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="It means the Car is often starring in Movies")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta bbb");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end


rule "Soul is the spirits of 43 dead clowns haunting the Car"
no-loop
when p:Preferences(option=="Soul is the spirits of 43 dead clowns haunting the Car")
     c: Client(cares_about=="New cars have no soul")
then
    c.setMeaningOfSoul(p.getOption());
    System.out.println("wykonuje sie");
update(c);
end

 //kolejne zapytanie - > sytuacja w ktorej nie ma juz do wyboru zadnych nowych decyzji
 //sprawdzamy cechy naszego klienta i na jego podstawie wybieramy dla niego samochody
rule "Client Soul is the spirits of 43 dead clowns haunting the Car"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Soul is the spirits of 43 dead clowns haunting the Car")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta ");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end


rule "Soul is the ability to go a million miles with Su Carbs and Lucas Electrics"
no-loop
when p:Preferences(option=="Soul is the ability to go a million miles with Su Carbs and Lucas Electrics")
     c: Client(cares_about=="New cars have no soul")
then
    c.setMeaningOfSoul(p.getOption());
    System.out.println("wykonuje sie");
update(c);
end

 //kolejne zapytanie - > sytuacja w ktorej nie ma juz do wyboru zadnych nowych decyzji
 //sprawdzamy cechy naszego klienta i na jego podstawie wybieramy dla niego samochody
rule "Client Soul is the ability to go a million miles with Su Carbs and Lucas Electrics"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Soul is the ability to go a million miles with Su Carbs and Lucas Electrics")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta ");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end



rule "It could mean pure Evil?"
no-loop
when p:Preferences(option=="It could mean pure Evil?")
     c: Client(cares_about=="New cars have no soul")
then
    c.setMeaningOfSoul(p.getOption());
    System.out.println("wykonuje sie");
update(c);
end

 //kolejne zapytanie - > sytuacja w ktorej nie ma juz do wyboru zadnych nowych decyzji
 //sprawdzamy cechy naszego klienta i na jego podstawie wybieramy dla niego samochody
rule "Client It could mean pure Evil?"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="It could mean pure Evil?")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta ");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end

//----------------------------------------------------------------------------
rule "Technically novel"
no-loop
when p:Preferences(option=="Technically novel")
     c: Client(cares_about=="New cars have no soul")
then

     c.setMeaningOfSoul(p.getOption());
     System.out.println(c);
     System.out.println(p);
    String[] myOptions = new String[] {"Instead of pistons, some metal Hamantaschen","Can burn cooking oil","Engine in the wrong place (maybe cooled by wrong Stuff)","They thought they were building a plane"};
    List choices = Arrays.asList(myOptions);
    String nextQuestion="Like what?";
    ChoiceDialog dialog = createDialog(choices,nextQuestion);
    p.setOption(getUserChoice(dialog));

update(p);
update(c);
end


rule "Instead of pistons, some metal Hamantaschen"
no-loop
when p:Preferences(option=="Instead of pistons, some metal Hamantaschen")
     c:Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Technically novel")
then
    c.setWhyTechnicallyNovel(p.getOption());
    System.out.println("wykonuje sie ");
update(c);
end


rule "Client Instead of pistons, some metal Hamantaschen"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Technically novel") and Client(whyTechnicallyNovel=="Instead of pistons, some metal Hamantaschen")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta ");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end


rule "Engine in the wrong place (maybe cooled by wrong Stuff)"
no-loop
when p:Preferences(option=="Engine in the wrong place (maybe cooled by wrong Stuff)")
     c:Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Technically novel")
then
    c.setWhyTechnicallyNovel(p.getOption());
    System.out.println("wykonuje sie ");
update(c);
end


rule "Client Engine in the wrong place (maybe cooled by wrong Stuff)"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Technically novel") and Client(whyTechnicallyNovel=="Engine in the wrong place (maybe cooled by wrong Stuff)")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta d ");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end

rule "Can burn cooking oil"
no-loop
when p:Preferences(option=="Can burn cooking oil")
     c:Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Technically novel")
then
    c.setWhyTechnicallyNovel(p.getOption());
    System.out.println("wykonuje sie ");
update(c);
end


rule "Client Can burn cooking oil"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Technically novel") and Client(whyTechnicallyNovel=="Can burn cooking oil")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta d ");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end


rule "They thought they were building a plane"
no-loop
when p:Preferences(option=="They thought they were building a plane")
     c:Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Technically novel")
then
    c.setWhyTechnicallyNovel(p.getOption());
    System.out.println("wykonuje sie ");
update(c);
end


rule "Client They thought they were building a plane"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Technically novel") and Client(whyTechnicallyNovel=="They thought they were building a plane")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta auta ");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end






rule "It means riding in it is like sitting on a Sofa"
no-loop
when p:Preferences(option=="It means riding in it is like sitting on a Sofa")
     c: Client(cares_about=="New cars have no soul")
then
    c.setMeaningOfSoul(p.getOption());
    System.out.println("wykonuje sie");
update(c);
end









//***************************
//PREFER STYLE
//***************************
rule "Prefer the style"
no-loop
when
    p:Preferences(option=="I prefer the style")
then
    String[] myOptions = new String[] {"I love chrome and loud shirts","Really slow cars that look fast","I love brass and lanterns","I can only drive cars that are museum-worthy","Working class hero, also beer","Classic German with a touch of pedal confusion"};
    List choices = Arrays.asList(myOptions);
    String nextQuestion="Ok, what kind of style?";
    ChoiceDialog dialog = createDialog(choices,nextQuestion);
    p.setOption(getUserChoice(dialog));
update(p);
end

rule "Love chrome and loud shirts"
no-loop
when p:Preferences(option=="I love chrome and loud shirts")
c: Client(cares_about=="I prefer the style")
then
    c.setKindOfStyle(p.getOption());
    System.out.println("STYLE sie");
update(c);
end

//kolejne zapytanie - > sytuacja w ktorej nie ma juz do wyboru zadnych nowych decyzji
//sprawdzamy cechy naszego klienta i na jego podstawie wybieramy dla niego samochody
rule "Client who loves chrome"
when c: Client(kindOfStyle=="I love chrome and loud shirts") and Client(cares_about=="I prefer the style")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta '57 Chevy Bel Air");
    //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end


rule "Really slow cars that look fast"
no-loop
when p:Preferences(option=="Really slow cars that look fast")
     c: Client(cares_about=="I prefer the style")
then
    c.setKindOfStyle(p.getOption());
    System.out.println("REally slow ");
update(c);
end


rule "Client really slow"
when c: Client(kindOfStyle=="Really slow cars that look fast") and Client(cares_about=="I prefer the style")
then //tutaj wyswietlimy nowe autka
    System.out.println("Mamy dla tego klienta 3 auta(Opel GT)");
    //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end



rule "Love brass and lanterns"
no-loop
when p:Preferences(option=="I love brass and lanterns")
     c: Client(cares_about=="I prefer the style")
then
      c.setKindOfStyle(p.getOption());
      System.out.println("I love brass and lanterns ");
update(c);
end


rule "Client who loves brass"
when c: Client(kindOfStyle=="I love brass and lanterns") and Client(cares_about=="I prefer the style")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta 2 auta(Opel GT)");
   //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end




rule "Working class hero, also beer"
no-loop
when p:Preferences(option=="Working class hero, also beer")
     c: Client(cares_about=="I prefer the style")
then
     c.setKindOfStyle(p.getOption());
     System.out.println(p.getOption());
update(c);
end


rule "Client who Working class hero, also beer"
when c: Client(kindOfStyle=="Working class hero, also beer") and Client(cares_about=="I prefer the style")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta 3 auta3");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end


rule "Classic German with a touch of pedal confusion"
no-loop
when p:Preferences(option=="Classic German with a touch of pedal confusion")
     c: Client(cares_about=="I prefer the style")
then
     c.setKindOfStyle(p.getOption());
     System.out.println(p.getOption());
update(c);
end


rule "Client who Classic German with a touch of pedal confusion"
when c: Client(kindOfStyle=="Classic German with a touch of pedal confusion") and Client(cares_about=="I prefer the style")
then //tutaj wyswietlimy nowe autka
     System.out.println("Mamy dla tego klienta 3 auta i 2");
     //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end

rule "I can only drive cars that are museum-worthy"
no-loop
when p:Preferences(option=="I can only drive cars that are museum-worthy")
     c: Client(cares_about=="I prefer the style")
then
     c.setKindOfStyle(p.getOption());
     System.out.println(p.getOption());
update(c);
end

         //kolejne zapytanie - > sytuacja w ktorej nie ma juz do wyboru zadnych nowych decyzji
         //sprawdzamy cechy naszego klienta i na jego podstawie wybieramy dla niego samochody
rule "Client who can only drive cars that are museum-worthy"
when c: Client(kindOfStyle=="I can only drive cars that are museum-worthy") and Client(cares_about=="I prefer the style")
then //tutaj wyswietlimy nowe autka
      System.out.println("Mamy dla tego klienta 3 auta");
      //TODO - NOWE GUI DIALOG KTORE BEDZIE WYSWIETLAC WYNIKI
end





//-------------------------------------------------------------------FUNCKJE-------------------------------------------------------------------------------------------------------

//tworzy kolejny dialog na podstawie podanego pytania i listy dostepnych wyborow
function ChoiceDialog createDialog(List myChoices,String nextQuestion){
    ChoiceDialog<String> dialog = new ChoiceDialog<>(myChoices.get(0).toString(), myChoices);
    dialog.setTitle("Car Asisstant");
    dialog.setHeaderText(nextQuestion);
    dialog.setContentText("Type an answer:");
    return dialog;

}
//pobiera kolejna preferencje uzytkownika
function String getUserChoice(ChoiceDialog dialog){
    Optional<String> wynik= dialog.showAndWait();
        if (wynik.isPresent()){
            System.out.println("Your choice: " + wynik.get());
        }
        return wynik.get();
}