package com.drools;

import javafx.scene.control.Label;
import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXRadioButton;
import javafx.scene.control.ToggleGroup
import javafx.scene.control.RadioButton;
import java.util.ArrayList;

import java.util.ArrayList
import javafx.scene.control.ChoiceDialog
import java.util.Optional
import javafx.scene.control.Label
import java.util.List
import java.util.Arrays
import com.jfoenix.controls.JFXDialog
import javafx.scene.layout.StackPane
import com.jfoenix.controls.JFXDialogLayout
import java.awt.event.ActionEvent
import javafx.scene.text.Text

global javafx.scene.control.ToggleGroup togglegroup
global com.jfoenix.controls.JFXRadioButton choice1
global com.jfoenix.controls.JFXRadioButton choice2
global com.jfoenix.controls.JFXRadioButton choice3
global com.jfoenix.controls.JFXRadioButton choice4
global com.jfoenix.controls.JFXRadioButton choice5
global com.jfoenix.controls.JFXRadioButton choice6
global com.jfoenix.controls.JFXRadioButton choice7
global com.jfoenix.controls.JFXRadioButton choice8
global com.jfoenix.controls.JFXRadioButton choice9
global com.jfoenix.controls.JFXRadioButton choice10
global com.jfoenix.controls.JFXRadioButton choice11
global com.jfoenix.controls.JFXRadioButton choice12
global com.jfoenix.controls.JFXButton nextButton
global javafx.scene.control.Label question
global javafx.scene.layout.StackPane stackPane


declare Client
    cares_about : String
    meaningOfSoul: String
end

declare Preferences
    option: String
end

rule "Initalization"
when
then

String[] myOptions = new String[] {"New cars have no soul","Elem2","Elem3","Elem4","Elem5"};
List mylist = Arrays.asList(myOptions);
String nextQuestion = "Why do you want a classic?";


Preferences preferences = new Preferences();
preferences.setOption(createDialogAndGetUserChoice(mylist,nextQuestion));
insert(preferences);

Client client = new Client();
client.setCares_about(preferences.getOption());
insert(client);

end


rule "New cars have no soul"
no-loop
when p:Preferences(option=="New cars have no soul")
then
String[] myOptions = new String[] {"gowno","Synonym for weird","Ehgh","Elem4","Elem5"};
List mylist = Arrays.asList(myOptions);
String nextQuestion="What does soul mean to you?";
String userChoice = createDialogAndGetUserChoice(mylist,nextQuestion);

p.setOption(userChoice);
update(p);
 end

 rule "Synonym for weird"
 no-loop
 when p:Preferences(option=="Synonym for weird")

 c: Client(cares_about=="New cars have no soul")
 then
 System.out.println("wykonuje sie");
c.setMeaningOfSoul(p.getOption());
update(c);
 end

rule "Client with weird soul"
when c: Client(cares_about=="New cars have no soul") and Client(meaningOfSoul=="Synonym for weird")
then //tutaj wyswietlimy nowe autka
System.out.println("Mamy dla tego klienta 3 auta");
 end



function String getChoice(){
    List<String> choices = new ArrayList<>();
    choices.add("Cars have no soul");
    choices.add("b");
    choices.add("c");

    ChoiceDialog<String> dialog = new ChoiceDialog<>("b", choices);
    dialog.setTitle("Car Asisstant");
    dialog.setHeaderText("Why classic car?");
    dialog.setContentText("Type an answer:");

    Optional<String> wynik= dialog.showAndWait();
    if (wynik.isPresent()){
        System.out.println("Your choice: " + wynik.get());


    }
    return wynik.get();

}
function String createDialogAndGetUserChoice(List myChoices,String nextQuestion){
    ChoiceDialog<String> dialog = new ChoiceDialog<>(myChoices.get(0).toString(), myChoices);
    dialog.setTitle("Car Asisstant");
    dialog.setHeaderText(nextQuestion);
    dialog.setContentText("Type an answer:");

    Optional<String> wynik= dialog.showAndWait();
    if (wynik.isPresent()){
        System.out.println("Your choice: " + wynik.get());


    }
    return wynik.get();

}
